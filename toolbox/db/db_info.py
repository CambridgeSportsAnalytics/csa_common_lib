import requests
import json


def get_table_columns(table_name: str, api_key: str):
    """Retrieves all columns and their respective datatypes in a table in 
    db-csa-primary

    Args:
        table_name (str): name of the target table 
        api_key (str): pass a csa api_key generated by AWS API Gateway
            see: https://us-east-1.console.aws.amazon.com/apigateway/home?region=us-east-1

    Returns:
        str[]: Returns an array of arrays containing key-value pairs.
            ie. [['key', 'value'], ['key', 'value'], ...]
    """
    url = "https://v9spadcya3.execute-api.us-east-1.amazonaws.com/v1/db-fields"
    headers = {"x-api-key": api_key}

    try:
        # Make the GET request
        response = requests.get(url, data=table_name, headers=headers)
        
        # Raise an exception for HTTP errors
        response.raise_for_status()

        response_json = response.json()
        status_code = response_json['status']
        
        if status_code == 200:
            # Parse the JSON response
            if 'col_data' in response_json.keys():
                # 'col_data' contains [[column_data_arr], size] so we slice [0]
                fields = response_json['col_data'][0]
                if len(fields) > 0:
                    return fields
                else:
                    raise Exception(
                        f"The returned list of fields for table {table_name} was empty. "
                        f"Most likely a spelling error in the table name"
                    )
        else:
            # Error message is None if status is 200, so we only need in else case
            error_msg = response_json['error_msg']
            raise Exception(f"Bad request ({status_code}): {error_msg}")
    
    except Exception as e:
        raise Exception(f"An error occurred: {e}")

# Example usage
get_table_columns("vault_results", "dIIFfIJPcymzq2TDRhe7chJLVBSlsa7r3axgub00")
